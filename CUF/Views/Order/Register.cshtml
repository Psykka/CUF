@model CUF.Models.OrderModel

@{
    ViewData["title"] = "Cadastro de Pedidos";
    var Name = User.Identity.Name;
    var UserId = User.Claims.Where(c => c.Type == "UserId").Select(c => c.Value).SingleOrDefault();
}

@section css {
    <style>
        .swal2-container .form-control {
            display: flex;
            box-sizing: border-box;
            padding: 2px;
        }

        .swal2-container .form-control div {
            padding: 0 5px;
            width: 100%;
        }

        .swal2-container .form-control label {
            text-align: center;
        }

        .swal2-container .form-control input {
            text-align: left;
        }

        .container {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        .btn {
            width: 120px;
        }

        .form-input {
            margin: 8px 0;
        }

        .col {
            flex-grow: 1;
        }

        .col h2 {
            font-weight: lighter;
            font-size: 1.2rem;
            color: #6e6c6c;
            align-self: flex-start;
        }

        .form-footer {
            margin-top: 10px;
        }

        .form-control {
            flex-direction: row;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        table,
        td {
            border-bottom: 1px solid #ddd;
            border-collapse: collapse;
        }

        table,
        th {
            border-bottom: 2px solid #ddd;
            border-collapse: collapse;
        }

        table .btn-squarred {
            width: 200px;
            text-align: center;
        }

        table .table-name {
            min-width: 30vw;
            max-width: 60vw;
        }

        th,
        td {
            padding: 15px;
            text-align: left;
        }

        .table-footer {
            display: flex;
            justify-content: center;
        }

        table tr:hover td {
            background-color: #ddd;
            cursor: pointer;
        }

        table td p {
            text-align: center;
        }

        .tr-footer:hover td {
            background-color: #fff;
        }
    </style>
}

<h1>Cadastro de Pedido</h1>
@*
Lista Produtos
Quantidade de produtos
Fornecedor do produto
Usuario (n√£o visivel)
*@

<form class="form-control" method="post" asp-controller="Product" asp-action="Save">
    <div>
        <div>
            <div>
                <label for="user">Usuario</label>
                <input type="text" class="form-control form-input" id="user" name="Company" value="@Name" disabled>
            </div>
        </div>
        <div>
            <table id="list">
                <tr>
                    <th class="table-name">Produto</th>
                    <th>Unidade</th>
                    <th>Tipo</th>
                    <th>Quantidade</th>
                </tr>
                <tr>
                    <td colspan="4">
                        <p>Nenhum produto inserido ainda...</p>
                    </td>
                </tr>
                <tr class="tr-footer">
                    <td colspan="4">
                        <div class="table-footer">
                            <button onclick="newSearchBox()" type="button" class="btn-squarred btn-squarred-primary">
                                <span class="material-symbols-outlined">
                                    add_circle
                                </span>
                            </button>
                        </div>
                    </td>
                </tr>
            </table>
        </div>
    </div>
    <div class="col form-footer">
        @if (Model.Id > 0)
        {
            <input type="hidden" name="Id" value="@Model.Id">
            <h2>ID: @Model.Id</h2>
        }
        <div class="col">
            <a asp-controller="Product" asp-action="List" class="btn btn-primary">Cancelar</a>
            <button type="submit" class="btn btn-success">Cadastrar</button>
        </div>
    </div>
</form>

@section scripts {
    <script>
        const addBtn = document.querySelector('#addButton')
        const cachedProducts = []
        const products = []

        const addProductToList = (product, qtd) => {
            const productExists = products.find(p => p.id === product.id)

            if (productExists) {
                productExists.qtd += parseInt(qtd)
            } else {
                products.push({
                    id: product.id,
                    name: product.name,
                    unit: product.unit,
                    type: product.type,
                    qtd: parseInt(qtd),
                })
            }

            newListTable()
        }

        const newListTable = () => {
            const rows = products.map(product => {
                return `
                        <tr>
                            <td>${product.name}</td>
                            <td>${product.unit ? getUnit(product.unit) : '-'}</td>
                            <td>${getProductType(product.type)}</td>
                            <td>${product.qtd}</td>
                        </tr>
                    `
            })

            rows.unshift(`
                    <tr>
                        <th class="table-name">Produto</th>
                        <th>Unidade</th>
                        <th>Tipo</th>
                        <th>Quantidade</th>
                    </tr>
                `)

            rows.push(`
                    <tr class="tr-footer">
                        <td colspan="4">
                            <div class="table-footer">
                                <button onclick="newSearchBox()" type="button" class="btn-squarred btn-squarred-primary">
                                    <span class="material-symbols-outlined">
                                        add_circle
                                    </span>
                                </button>
                            </div>
                        </td>
                    </tr>
                `)

            const table = document.querySelector('#list')
            table.innerHTML = rows.join('')
        }

        const newSearchTable = (data) => {
            const rows = data.map(product => {

                if (!cachedProducts.find(p => p.id === product.id)) {
                    cachedProducts.push(product)
                }

                return `
                        <tr onclick="addProduct(${product.id})">
                            <td>${product.name}</td>
                            <td>${product.unit ? getUnit(product.unit) : '-'}</td>
                            <td>${getProductType(product.type)}</td>
                        </tr>
                    `
            })

            rows.unshift(`
                    <tr>
                        <th>Produto</th>
                        <th>Unidade</th>
                        <th>Tipo</th>
                    </tr>
                `)

            const table = document.querySelector('#result')
            table.innerHTML = rows.join('')
        }

        const newSearchBox = () => {
            Swal.fire({
                title: 'Adicionar Produto',
                html: `
                                    <div class="form-control">
                                        <div>
                                            <label for="name">Escreva o nome do produto</label>
                                            <input type="text" class="form-input" id="search" oninput="searchProdut(this)" autocomplete="off">
                                        </div>
                                    </div>
                                    <table id="result">
                                    </table>
                                    <div class="form-control">
                                    </div>
                                `,
                showConfirmButton: false,
                didOpen: () => {
                    const input = document.querySelector('#search')
                    input.focus()

                    fetch(`${host}/Product/Get`)
                        .then(res => res.json())
                        .then(data => newSearchTable(data))
                },
            })
        }

        const searchProdut = (input) => {
            const value = input.value
            const url = !value ? `${host}/Product/Get` : `${host}/Product/Search?name=${value}`

            fetch(url)
                .then(res => res.json())
                .then(data => newSearchTable(data))
        }

        const addProduct = (id) => {
            const product = cachedProducts.find(p => p.id === id)

            Swal.fire({
                icon: 'question',
                title: 'Informe a quantidade',
                html: `
                        <p>Qual a quantidade desejada do produto:<br /><b>${product.name}</b></p>
                        <div class="form-control">
                            <div>
                                <input type="number" class="form-input" id="qtd" value="1">
                            </div>
                        </div>
                    `,
            }).then(res => {
                if (res.isConfirmed) {
                    const qtd = document.querySelector('#qtd').value
                    addProductToList(product, qtd)
                }
            })
        }
    </script>
}
