@model CUF.Models.SupplierModel

@{
    ViewData["title"] = "Cadastro de Fonecedor";
}

@section css {
    <style>
        .container {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        .btn {
            width: 120px;
        }

        .form-input {
            margin: 8px 0;
        }

        .col {
            flex-grow: 1;
        }

        .col h2 {
            font-weight: lighter;
            font-size: 1.2rem;
            color: #6e6c6c;
        }

        .form-footer {
            margin-top: 20px;
            width: 100%;
        }

        table .btn-squarred {
            width: 150px;
            text-align: center;
        }

        form {
            width: 100%;
            display: flex;
        }

        table .table-name {
            border-collapse: collapse;
        }

        .register {
            display: flex;
            flex-direction: row;
            width: 100%;

            gap: 20px;
        }

        .form-inputs {
            display: flex;
            flex-direction: column;
            width: 100%;
        }
    </style>
}

<h1>Cadastro de Fornecedor</h1>
<form id="submit-form" class="form-control" method="post" asp-controller="Supplier" asp-action="Save">
    <div class="register">
        <div class="form-inputs">
            <div>
                <label for="company">Razão Social</label>
                <input type="text" class="form-control form-input" id="company" name="Company"
                    placeholder="Ex. Discord S.A" value="@Model.Company" required>
            </div>

            <div>
                <label for="trade">Nome Fantasia</label>
                <input type="text" class="form-control form-input" id="trade" name="Trade" placeholder="Ex. Discord"
                    value="@Model.Trade" required>
            </div>

            <div>
                <label for="cnpj">CNPJ</label>
                <input type="text" class="form-control form-input" id="cnpj" name="CNPJ"
                    placeholder="Ex. 05.073.318/0001-16" value="@Model.CNPJ" required>
            </div>

            <div>
                <label for="phone">Telefone</label>
                <input type="text" class="form-control form-input" id="phone" name="Phone"
                    placeholder="Ex. (16) 98821-0103" value="@Model.Phone" required>
            </div>

            <div>
                <label for="email">E-mail</label>
                <input type="text" class="form-control form-input" id="email" name="Email"
                    placeholder="Ex. suporte@discord.com" value="@Model.Email" required>
            </div>

        </div>

        <table id="list">
            <tr>
                <th class="table-name">Produto</th>
                <th>Unidade</th>
                <th>Tipo</th>
                <th>Ações</th>
            </tr>
            <tr>
                <td colspan="5">
                    <p>Nenhum produto inserido ainda...</p>
                </td>
            </tr>
            <tr class="tr-footer">
                <td colspan="5">
                    <div class="table-footer">
                        <button onclick="newSearchBox()" type="button" class="btn-squarred btn-squarred-primary">
                            <span class="material-symbols-outlined">
                                add_circle
                            </span>
                        </button>
                    </div>
                </td>
            </tr>
        </table>
    </div>
</form>
<div class="col form-footer">
    @if (Model.Id > 0)
    {
        <input type="hidden" name="Id" value="@Model.Id">
        <h2>ID: @Model.Id</h2>
    }
    <div class="col">
        <a asp-controller="Supplier" asp-action="List" class="btn btn-primary">Cancelar</a>
        <button type="submit" form="submit-form" class="btn btn-success">Cadastrar</button>
    </div>
</div>

@section scripts {
    <script>
        const cachedProducts = []
        const products = []

        const addProductToList = (product) => {
            const productExists = products.find(p => p.id === product.id)

            if (!productExists) {
                products.push(product)
            }

            newListTable()
        }

        const newListTable = () => {
            const rows = products.map(product => {
                return `
                                <tr>
                                    <td>${product.name}</td>
                                    <td>${product.unit ? getUnit(product.unit) : '-'}</td>
                                    <td>${getProductType(product.type)}</td>
                                    <td>
                                        <div class="table-footer">
                                            <button onclick="removeProduct(${product.id})" type="button" class="btn-squarred btn-squarred-danger">
                                                <span class="material-symbols-outlined">
                                                    remove_circle
                                                </span>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            `
            })

            rows.unshift(`
                            <tr>
                                <th class="table-name">Produto</th>
                                <th>Unidade</th>
                                <th>Tipo</th>
                                <th>Quantidade</th>
                            </tr>
                        `)

            rows.push(`
                            <tr class="tr-footer">
                                <td colspan="4">
                                    <div class="table-footer">
                                        <button onclick="newSearchBox()" type="button" class="btn-squarred btn-squarred-primary">
                                            <span class="material-symbols-outlined">
                                                add_circle
                                            </span>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        `)

            const table = document.querySelector('#list')
            table.innerHTML = rows.join('')
        }

        const newSearchTable = (data) => {
            const rows = data.map(product => {

                if (!cachedProducts.find(p => p.id === product.id)) {
                    cachedProducts.push(product)
                }

                return `
                                <tr onclick="addProduct(${product.id})">
                                    <td>${product.name}</td>
                                    <td>${product.unit ? getUnit(product.unit) : '-'}</td>
                                    <td>${getProductType(product.type)}</td>
                                </tr>
                            `
            })

            rows.unshift(`
                            <tr>
                                <th>Produto</th>
                                <th>Unidade</th>
                                <th>Tipo</th>
                            </tr>
                        `)

            const table = document.querySelector('#result')
            table.innerHTML = rows.join('')
        }

        const newSearchBox = () => {
            Swal.fire({
                title: 'Adicionar Produto',
                html: `
                                            <div class="form-control">
                                                <div>
                                                    <label for="name">Escreva o nome do produto</label>
                                                    <input type="text" class="form-input" id="search" oninput="searchProdut(this)" autocomplete="off">
                                                </div>
                                            </div>
                                            <table id="result">
                                            </table>
                                            <div class="form-control">
                                            </div>
                                        `,
                showConfirmButton: false,
                didOpen: () => {
                    const input = document.querySelector('#search')
                    input.focus()

                    fetch(`${host}/Product/Get`)
                        .then(res => res.json())
                        .then(data => newSearchTable(data))
                },
            })
        }

        const searchProdut = (input) => {
            const value = input.value
            const url = !value ? `${host}/Product/Get` : `${host}/Product/Search?name=${value}`

            fetch(url)
                .then(res => res.json())
                .then(data => newSearchTable(data))
        }

        const addProduct = (id) => {
            const product = cachedProducts.find(p => p.id === id)

            Swal.fire({
                icon: 'success',
                title: `Item adicionado a lista`,
                html: `<p>Produto: <b>${product.name}</b></p>`
            }).then(res => {
                addProductToList(product)
            })
        }

        const removeProduct = (id) => {
            const product = products.find(p => p.id === id)

            Swal.fire({
                icon: 'warning',
                title: `Remover item da lista`,
                html: `<p>Produto: <b>${product.name}</b></p>`,
                showCancelButton: true,
                confirmButtonText: 'Remover',
                cancelButtonText: 'Cancelar'
            }).then(res => {
                if (res.isConfirmed) {
                    products.splice(products.indexOf(product), 1)
                    newListTable()
                }
            })
        }
    </script>
}
